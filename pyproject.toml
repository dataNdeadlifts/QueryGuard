[tool.poetry]
name = "QueryGuard"
version = "0.3.1-beta.1"
description = "A guard against unruly sql."
authors = ["Tyler Klier <tylerklier@gmail.com>"]
readme = "README.md"

[tool.poetry.scripts]
qg = "queryguard.__main__:cli"
queryguard = "queryguard.__main__:cli"

[tool.poetry.dependencies]
python = "^3.9"
sqlparse = "^0.4.4"
rich = "^13.6.0"
typer = "^0.9.0"
tomli = { version = "^2.0.1", python = "<3.11" }

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
coverage = "^7.3.2"
pytest = "^7.4.3"
pre-commit = "^3.5.0"
mypy = "^1.8.0"
lxml = "^4.9.4"
ruff = "^0.1.9"
mkdocs = "^1.5.3"
mkdocstrings = { extras = ["python"], version = "^0.24.0" }
python-semantic-release = "^8.7.0"
tomli = "^2.0.1"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
coverage = "^7.3.2"
pytest = "^7.4.3"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocstrings = { extras = ["python"], version = "^0.24.0" }

[tool.ruff]
select = [
    "ANN", # flake8-annotations
    "B",   # flake8-bugbear
    "D",   # pydocstyle
    "E",   # pycodestyle
    "F",   # pyflakes
    "FA",  # flake8-future-annotations
    "I",   # isort
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "RUF", # ruff
    "UP",  # pyupgrade
]
line-length = 120
target-version = "py38"
ignore = [
    "ANN101", # ANN101 Missing type annotation for `self` in method
    "D100",   # D100 Missing docstring in public module
    "D104",   # D104 Missing docstring in public package
    "D105",   # Missing docstring in magic method
]

[tool.ruff.per-file-ignores]
"*_test.py" = ["D", "S101"]
"rules.py" = ["D102"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = ["sqlparse"]
ignore_missing_imports = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.semantic_release]
version_variables = [
    "queryguard/__main__.py:__version__",
    "queryguard/__init__.py:__version__",
]
version_toml = ["pyproject.toml:tool.poetry.version"]
assets = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.branches.beta]
match = "release/*"
prerelease = true
prerelease_token = "beta"

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = ["(?!feat|fix|perf).+"]

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

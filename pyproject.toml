[tool.poetry]
name = "QueryGuard"
version = "1.0.0-beta.1"
description = "A SQL policy guardian."
authors = ["Tyler Klier <tylerklier@gmail.com>"]
readme = "README.md"

[tool.poetry.scripts]
qg = "queryguard.__main__:cli"
queryguard = "queryguard.__main__:cli"

[tool.poetry.dependencies]
python = "^3.11"
sqlparse = "^0.4.4"
rich = "^13.6.0"
typer = "^0.9.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
coverage = "^7.3.2"
pytest = "^7.4.3"
pre-commit = "^3.5.0"
dagger-io = "^0.9.4"
mypy = "^1.8.0"
lxml = "^4.9.4"
ruff = "^0.1.9"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
coverage = "^7.3.2"
pytest = "^7.4.3"

[tool.ruff]
select = [
    "ANN", # flake8-annotations
    "B",   # flake8-bugbear
    "D",   # pydocstyle
    "E",   # pycodestyle
    "F",   # pyflakes
    "FA",  # flake8-future-annotations
    "I",   # isort
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "RUF", # ruff
    "UP",  # pyupgrade
]
line-length = 120
target-version = "py38"
ignore = [
    "ANN101", # ANN101 Missing type annotation for `self` in method
    "D100",   # D100 Missing docstring in public module
    "D104",   # D104 Missing docstring in public package
    "D105",   # Missing docstring in magic method
]

[tool.ruff.per-file-ignores]
"*_test.py" = ["D", "S101"]
"rules.py" = ["D102"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = ["sqlparse"]
ignore_missing_imports = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
